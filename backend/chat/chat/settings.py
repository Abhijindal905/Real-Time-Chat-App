"""
Django settings for your chat project.

Generated by 'django-admin startproject' using Django X.X.

For more information on this file, see
https://docs.djangoproject.com/en/X.X/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/X.X/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url # Make sure to install: pip install dj-database-url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# This calculates BASE_DIR to be '/your-project-root/backend/chat/'
# because settings.py is in 'backend/chat/chat/settings.py'
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# On Render, you should set this as an environment variable.
# For local development, you can keep a default, but NEVER use a hardcoded key in production.
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-super-secret-key-for-local-dev-only-change-this-in-render')

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to False in production. Render will typically set this via environment.
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Allowed hosts for your Django application.
# '.render.com' allows all Render subdomains.
# RENDER_EXTERNAL_HOSTNAME is automatically injected by Render.
ALLOWED_HOSTS = [
    '.render.com',
    os.environ.get('RENDER_EXTERNAL_HOSTNAME'),
    'localhost',
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = [
    'channels', # For WebSockets and async capabilities
    'corsheaders', # For Cross-Origin Resource Sharing
    'rest_framework', # Django REST Framework for your API
    'rest_framework_simplejwt', # For JWT authentication
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', # Your custom Django app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Must be very high, preferably first
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS (Cross-Origin Resource Sharing) configuration.
# This allows your React frontend (on a different domain/port) to communicate with your Django backend.
# FRONTEND_URL will be set as an environment variable on Render for your backend service.
# Example: FRONTEND_URL=https://your-react-frontend.onrender.com
CORS_ALLOWED_ORIGINS = [
    os.environ.get('FRONTEND_URL', 'http://localhost:3000'), # Default for local React dev
    # Add any other specific origins if needed, e.g., 'http://127.0.0.1:3000'
]
CORS_ALLOW_CREDENTIALS = True # Allow cookies/authentication headers

ROOT_URLCONF = 'chat.urls' # Your main Django project's URL configuration

# Template configuration for Django.
# This is crucial for Django to find your HTML templates, including the React build's index.html.
# BASE_DIR is '/your-project-root/backend/chat/'
# '../../frontend/chat/build' means:
#   '../' (from backend/chat/) -> '/your-project-root/backend/'
#   '../' (from backend/) -> '/your-project-root/'
#   'frontend/chat/build' -> '/your-project-root/frontend/chat/build'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../../frontend/chat/build')],
        'APP_DIRS': True, # Allows Django to find templates within app subdirectories (e.g., core/templates/)
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Good for local dev, can remove in production
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ASGI application for Django Channels.
# 'chat.asgi:application' refers to the 'application' object in your 'backend/chat/chat/asgi.py' file.
ASGI_APPLICATION = 'chat.asgi.application'

# Channels Layer configuration for Redis.
# Render will automatically inject the REDIS_URL environment variable for its managed Redis service.
# Example: REDIS_URL=redis://redis-service-name:6379
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379')], # Fallback for local dev
        },
    },
}

# Database configuration.
# Render will automatically inject the DATABASE_URL environment variable for its managed PostgreSQL.
# Example: DATABASE_URL=postgresql://user:password@host:port/dbname
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'), # Fallback for local dev
        conn_max_age=600, # Optional: Max age for database connections
        # 'OPTIONS': {
        #     'sslmode': 'require', # Uncomment this if your database requires SSL (Render's usually does)
        # }
    )
}

# Password validation
# https://docs.djangoproject.com/en/X.X/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST Framework settings for JWT authentication.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# Internationalization
# https://docs.djangoproject.com/en/X.X/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/X.X/howto/static-files/

# STATIC_URL is the URL prefix for static files in your templates.
STATIC_URL = '/static/'

# STATIC_ROOT is the absolute path to the directory where collectstatic will gather static files for deployment.
# This will be '/your-project-root/backend/chat/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# STATICFILES_DIRS is a list of additional locations where Django's staticfiles app will look for files.
# This is used to include the static assets from your React build.
# '../../frontend/chat/build/assets' means:
#   '../' (from backend/chat/) -> '/your-project-root/backend/'
#   '../' (from backend/) -> '/your-project-root/'
#   'frontend/chat/build/assets' -> '/your-project-root/frontend/chat/build/assets'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '../../frontend/chat/build/assets')
]

# Media files (user-uploaded content)
# MEDIA_URL is the URL prefix for media files.
MEDIA_URL = '/media/'
# MEDIA_ROOT is the absolute path to the directory where uploaded files will be stored.
# This will be '/your-project-root/backend/chat/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/X.X/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'